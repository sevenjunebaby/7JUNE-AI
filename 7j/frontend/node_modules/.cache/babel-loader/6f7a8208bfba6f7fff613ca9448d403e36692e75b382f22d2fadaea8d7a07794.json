{"ast":null,"code":"var _jsxFileName = \"/home/wissal/Desktop/web/AI-7J/AI-7j/7j/frontend/src/components/ChatApp.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport \"./ChatApp.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatApp = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [userInput, setUserInput] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(false);\n  const sendMessage = async () => {\n    if (!userInput.trim()) return;\n\n    // Add user's message to the chat\n    const userMessage = {\n      text: userInput,\n      sender: \"user\"\n    };\n    setMessages([...messages, userMessage]);\n    setIsTyping(true); // Show typing indicator\n\n    try {\n      // Send request to Flask API\n      const response = await axios.post(\"http://localhost:5000/chat\", {\n        question: userInput\n      });\n\n      // Simulate typing effect for bot's reply\n      const botReply = response.data.reply;\n      typeBotMessage(botReply);\n    } catch (error) {\n      console.error(\"Error connecting to the Flask backend:\", error);\n      setMessages(prevMessages => [...prevMessages, {\n        text: \"Error communicating with the server.\",\n        sender: \"bot\"\n      }]);\n      setIsTyping(false);\n    }\n    setUserInput(\"\"); // Clear input field after message is sent\n  };\n  const typeBotMessage = message => {\n    let currentText = \"\";\n    const interval = 50; // Typing speed in milliseconds\n\n    message.split(\"\").forEach((char, index) => {\n      setTimeout(() => {\n        currentText += char;\n        setMessages(prevMessages => [...prevMessages.slice(0, -1),\n        // Remove the incomplete message\n        {\n          text: currentText,\n          sender: \"bot\"\n        }]);\n        if (index === message.length - 1) setIsTyping(false); // Typing finished\n      }, index * interval);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chat-box\",\n      children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: msg.sender === \"user\" ? \"user-message\" : \"bot-message\",\n        children: msg.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"typing-indicator\",\n        children: \"Typing...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"user-input\",\n      placeholder: \"Ask something...\",\n      value: userInput,\n      onChange: e => setUserInput(e.target.value),\n      onKeyDown: e => e.key === \"Enter\" && sendMessage()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatApp, \"6L5vhmvnGmy8wJQ9fpGOTLL1H/k=\");\n_c = ChatApp;\nexport default ChatApp;\nvar _c;\n$RefreshReg$(_c, \"ChatApp\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","ChatApp","_s","messages","setMessages","userInput","setUserInput","isTyping","setIsTyping","sendMessage","trim","userMessage","text","sender","response","post","question","botReply","data","reply","typeBotMessage","error","console","prevMessages","message","currentText","interval","split","forEach","char","index","setTimeout","slice","length","className","children","id","map","msg","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onKeyDown","key","onClick","_c","$RefreshReg$"],"sources":["/home/wissal/Desktop/web/AI-7J/AI-7j/7j/frontend/src/components/ChatApp.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport \"./ChatApp.css\";\n\nconst ChatApp = () => {\n  const [messages, setMessages] = useState([]);\n  const [userInput, setUserInput] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(false);\n\n  const sendMessage = async () => {\n    if (!userInput.trim()) return;\n\n    // Add user's message to the chat\n    const userMessage = { text: userInput, sender: \"user\" };\n    setMessages([...messages, userMessage]);\n\n    setIsTyping(true); // Show typing indicator\n\n    try {\n      // Send request to Flask API\n      const response = await axios.post(\"http://localhost:5000/chat\", {\n        question: userInput,\n      });\n\n      // Simulate typing effect for bot's reply\n      const botReply = response.data.reply;\n      typeBotMessage(botReply);\n    } catch (error) {\n      console.error(\"Error connecting to the Flask backend:\", error);\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { text: \"Error communicating with the server.\", sender: \"bot\" },\n      ]);\n      setIsTyping(false);\n    }\n\n    setUserInput(\"\"); // Clear input field after message is sent\n  };\n\n  const typeBotMessage = (message) => {\n    let currentText = \"\";\n    const interval = 50; // Typing speed in milliseconds\n\n    message.split(\"\").forEach((char, index) => {\n      setTimeout(() => {\n        currentText += char;\n        setMessages((prevMessages) => [\n          ...prevMessages.slice(0, -1), // Remove the incomplete message\n          { text: currentText, sender: \"bot\" },\n        ]);\n\n        if (index === message.length - 1) setIsTyping(false); // Typing finished\n      }, index * interval);\n    });\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <div id=\"chat-box\">\n        {messages.map((msg, index) => (\n          <div\n            key={index}\n            className={msg.sender === \"user\" ? \"user-message\" : \"bot-message\"}\n          >\n            {msg.text}\n          </div>\n        ))}\n        {isTyping && <div className=\"typing-indicator\">Typing...</div>}\n      </div>\n      <input\n        type=\"text\"\n        id=\"user-input\"\n        placeholder=\"Ask something...\"\n        value={userInput}\n        onChange={(e) => setUserInput(e.target.value)}\n        onKeyDown={(e) => e.key === \"Enter\" && sendMessage()}\n      />\n      <button onClick={sendMessage}>Send</button>\n    </div>\n  );\n};\n\nexport default ChatApp;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}